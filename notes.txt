Application: username: hien91, pass: Letmein-88, security answers: Beta, Vu, Cincinnati (uppercase).

Workstation ID: WVWNO006C2783
Project #: PRJ 400638
Product #: PRJ403490

Custom TomCat Start: %CATALINA_HOME%\bin\startup.bat
Shutdown: %CATALINA_HOME%\bin\shutdown.bat
Default site: http://localhost:8080/
Team Name: Store Item and Pricing Technology

programmer (1.5 year promotions) -> programmer analyst (70k) -> senior programmer analyst (90k) -> (SA) architect
--> te --> ste (150k)

Changing VDI pass: click that dropdown arrow at the top that gives you the quick menu access. Choose "ctrl+alt+del", and
the you can change your password from there.


Current/Wachusetts notes/to-do:
 * Sass is used to add variables & functions to CSS to make it conform to different screen sizes.
 * Don't worry too much about gulp.js. It's there on the menuOrdering, but not actually being used. It's there just in
   case we might need it later. Wachusetts will be the same.
 * Ionic is a framework that gives you all the GUI looks. It's what will help give it the Walmart look.
 ? How do I get the icons on ionic to work? -> Found out from MOA- it's a different syntax. 
   Use class="button ion-arrow-up-a" as an example.
 * Put new Wachusetts on OneOps.

MOA notes/to-do:
 - Use store # 4 on the configurations at the beginning. It's like the only one with some configuration thing that works.
 - The items currently are received externally using services that actually call on the online database.
   The services to note are "menu_ordering.web-service.js" and "base.web-service.js". When you see "web-service", this 
   means it specifically gets its info online.
 - A lot of the links you see at the top like "http://category5" are generated using the state generator.
 - When checking on data passed from service, get it from landingController. Any other place might have the data tampered
   with.
 - When console logging objects, use JSON.stringify(objectName)
 - Order Viewer html is the order-viewer.html under widgets folder. Controlled by the corresponding js file.
 - SASS command: be on the same directory as the scss files via "cd" command. Then use "sass --watch <fileName>".
 - seperate the cancel/accept buttons with outline, and change text to the matching gray color.
 - The 3 places I set the cancel logic are: selectionController for back button via ionic code,
   sideMenuController for side menu options, and navigationHelperService for home button. They all use the same
   code: need to find a way to centralize it.
 - The current radio alignment messes up if text is too long. Noticeable for spanish items.
 - New scrolling re-factor: style it to its final form. Make it scroll a percentage as opposed to the entire view, and
   make the buttons fixed (fixed attribute won't work for ionic) to move with the screen.
 - "Entree" and "side" are ugly on Toledo. It happens when the screen width is too small. Make this stretch more
   dynamically.
 - The code for the display options bonus feature I had to disable is on commit: a67fd4989fd April 10, 2017. It should
   just be the changes in short-template.html and selection-controller. On sel-controller, I think it's just the two
   added functions and the two function declarations at the top. And the added columnPercent variable. Then the ng-class.
 - Meno-Ordering-web-service -> calls data-visibility-helper-service -> hides all items that shouldn't show up
   -> flows to selection-controller's hierarchy object: vm.selectedSideMenuOptionList to have all the choices.
 - To get current controller using $state dependency injection: "$state.current.views.main.controller"

	  
MOA Bookmarks:  

	- CURRENT: default bug fixes. Recently added fix so that drilldown-default + non-drilldown defaults can work
	together (2nd email issue 2 & 4). Also added ability to make drilldown pop-up show up when parent node default
	is chosen (1st email issue # 2). For 2nd email issue # 3, clarify that this is same as issue # 1 of first email,
	where we have to let it go for now and put it in as a backlog card: we can't choose 2 of the same drilldown items
	on the same component/tab.

	- Add task(s) to JIRA: Added load time to side-menu. Make refresh not activate on certain screens.
	  Drilldown pagify (not done).
	- Drilldown: make it page-based instead of radio-button based.
	- Required feature: do this when default feature is finished.

	- Default: I've seen results when there are multiple defaults on the entree for 1-plate. It does not select
	  all of them like it should; it only selects one. When default was set to wings & popcorn chicken, it only
	  selected popcorn chicken. 

	- Side scrolling: disable scrollbar like I've done before somewhere on CSS.
	- Bug: Clicking bakery then home multiple times glitches up. Will work if you spam home on the actual bakery
	  selection menu. The problem is that when you click bakery, there's another tab, and hitting the home button makes
	  you go home while you're still already in the desired state. So spamming home like that will eventually set
	  that bakery tab as the default home load-up when it should be build-a-plate & bakery.


Troubleshooting:
* The VDI sometimes updates itself and deletes what you have on Desktop. But if you go into C/Users/vn52595/Desktop,
  it'll still be there. So copy/paste all the stuff & workspace back onto new Desktop. The first time I did this, I was
  not able to copy over certain things, but I skipped and it was fine. The server didn't start up at first, so I solved it
  by removing one of the previous projects from the server so only the Wachusett project was left, then I started it in
  debug mode, and it worked.


Git Notes:
* Workspace is the Git repository.
* Make sure when importing projects, it's from your repo online.
* By default, the VDI has folders set to hidden. In properties, there were two places where you need to tell it to
  not hide folders by default.
* You really only need the pom file. The .class and othe files will be created from pom. 
* When trying to import something from git, use Eclipse's import git option that directly has you typing in the git link
  on Eclipse. Trying to download/clone it to your local files then importing it gives you "project not found" issues.

* How I started a new Git project: First I went onto BitBucket and used the option to create my own repo. It gave me all
the terminal commands I needed to create a new repo folder on my VDI. I put my Eclipse folder inside the repo by manual
drag-n-drop, and it automatically synched. After following all the terminal instructions and getting it all initially
set up, I had the repo online link. From there, I can use the link like anyone else's BitBucket link to create a repo
in my VDI wherever I want by right-click-> Git Ext Clone -> paste in link. I did this right-click clone onto where my
workspace was. At some point, I accidentally deleted my main repo source (the first repo folder, not the one in workspace),
but it didn't matter anymore because as long as I have the repo online link, and the project files are all in there already,
then that's all you need. then I went onto Eclipse and used import to import an existing git project, and imported the
repo project I put in my workspace. It all worked from there, and if I wanted to pull/push/commit, I would use
Git Extension. You can use the terminal on Git Extension or the GUI. 
	The last time I did this, I don't think I needed to follow the initial command line steps at all. You just go
straight to your workspace and right-click->clone using the link. You'll have an empty repo, so in order to create the
project there, create a new project using that repo folder as your workspace location. Use Git Extension to commit/push
that new project. After that, if you need to delete it and re-import it, use the import Git option.
	I think in order to use the git repo as the workspace location when making new project, it needs to have the same
name. If not, then you can create a new project, copy/paste it into that repo, then delete the original project, and
import the git repo and use the "import nested projects" option.


*Disabled Chrome Security- copy/paste a shortcut to Chrome on Desktop or somewhere. Right-click on that shortcut, and go
into properties. Under "shortcut tab", on "target", paste in: 
"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --disable-web-security --user-data-dir
WITH the double-quotes at beginning. Open up Chrome with f12 debugger open to ensure the changes take over, and check the
console log. You'll get that error message letting you know if you're trying to do something that requires security
disabled.


*How they fixed my VDI's node.js problem: "i corrected the.npmrc file for proxy".


Setting up Eclipse (new workspace):
* Make workspace your Git repository
* Update to java 1.8: http://stackoverflow.com/questions/22619262/upgrade-eclipse-to-java-8
* Setup server (Word document in Documents folder shows how)
* Maven setup if needed (details below)
* Settings.xml in windows-preferences(?)
* After the VDI maintenance, the workspace is NOT the one in the Desktop. It's in the inner Desktop that you get to with:
  users->vn52595->C:->Desktop->Workspace


Environment Variables:
* Need Maven & Java home environment variables. Because we can't edit the Path variable on VDI, we edit the path variable
on the local user environment variable. Instructions online never tell you that you can do this, but it looks like it 
works. To append a new path, separate variables with ";".


Maven Notes:
* installed in: C:\Users\vn52595\.m2\repository\org\apache\maven\plugins
* Inside the resources plugin for 2.6, all of the plugin files are named with the extension ".lastupdated", with the
  files being only like 1 or 2 kb in size.
* settings.xml missing, so I downloaded it, and put it in the .m2 folder. In the xml, change the username to
  your username. In Eclipse in some setting (don't remember where), I think you had to set up the path to detect the
  settings.xml.
* I downloaded the Maven I had on my main Computer's Program Files. I put this on the Desktop workspace and linked to it
on  Eclipse (window->preferences->maven->installation->change path).
	Then on window->preferences->maven->user settings: you need to link to your VDI's .m2 settings.xml file.

Leankit instructions:
1.	Access your site: https://walmart.leankit.com/
2.	Sign in using your email address (Hien.Nguyen@walmart.com) and temporary password*: Test@123


Leankit: go to EnableU, and go to Requests->Account Maintenance. From there, fill out the request for Leankit using 
"HOMEOFFICE" (default) as the domain.

Custom Tomcat server: folders directly put onto C folder. "Enterprise Server Dozer"
Eclipse files: all put directly onto C folder.

Submitting Ticket to solve problem: The ticket system is on EnableU


Eclipse: EnableU did some tinkering, and got java 1.7 working, so Eclipse Luna worked. To upgrade to Mars, I used the link
from the project documentation (on "My Documents") to download the 64 bit version. I then had a problem saying the path
to java wasn't right, so I had to set up the environment variables: JAVA_HOME- path to java 1.7 jdk, and PATH- path to
that jdk's "bin" folder (can just use: "%JAVA_HOME%\bin").
	I'm guessing the problem with java 1.8 is that it doesn't have the "src" file it's supposed to have inside it's
directory. java 1.7 does have it, so that's probably why it works. Also, using "java -version" on cmd line won't work unless
you have the PATH evironment variable setup correctly.
	Java file is in: C:/program files/java. 
	Eclipse Mars is in: C:/New Eclipse Mars
	To setup environment variables, I just search "environment" and it's one of the first options that show up.
UPDATE: Turns out you don't need the "src" folder in 1.8 java JDK. I got it to work on my Eclipse Mars by using this:
http://stackoverflow.com/questions/22619262/upgrade-eclipse-to-java-8 (upgrades to java 1.8 by "adding" it into the system)
	If project not building when choosing 1.8 default JRE environment or whatever, try making a regular new java
project. I was able to fix up a configuration from there (it'll prompt you as you're making the new project) to work with
java 1.8.



Ideas: What if we created a pattern-system PLU so workers can still memorize PLU codes once they're used to it. By 
"pattern", I mean maybe a 2-combo always has "382", and mashed potatoes has "44", so we can memorize and combine them
to make "38244". If you can't recreate the PLU system, then just make it an unrelated "shortcut" system where you can
optionally type in numbers on the side if you have everything memorized.
	 Maybe even throw in an auto-complete system if 
there's time: like it gives you auto-results you can click. Additionally, the auto-complete could shortcut link you to
the GUI with the item you entered the code for as you continue typing. Also, even if you use the GUI, it'll auto-show
you the shortcut code and create it on the side to help you memorize. 






























